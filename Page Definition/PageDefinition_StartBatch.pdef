{
  "TrakSYS_Version": "12.0.0",
  "Name": "Start Job",
  "AltName": "",
  "Description": "",
  "Notes": "",
  "Key": "StartBatch",
  "IconCss": "",
  "NavigationIconCss": "",
  "NavigationTitle": "",
  "PageTitle": "",
  "RefreshSeconds": 0,
  "RefreshKeysEx": "",
  "IsHeaderVisible": 2,
  "IsTitleVisible": 2,
  "IsBreadcrumbsVisible": 2,
  "SidebarMode": 2,
  "CssMode": 1,
  "IsSpokesVisible": 2,
  "IsVisibleInNavigation": false,
  "InstanceType": 0,
  "InstanceScript": "",
  "ValueScript": "",
  "Css": "",
  "Js": "",
  "ContentMode": 0,
  "ContentKey": "",
  "ContentView": "<Content><Row ID=\"R1\"><ColFixedLeft ID=\"R1C1\" Width=\"200\" CssClassExtra=\"\" ShownInXs=\"True\" ShownInSm=\"True\" ShownInMd=\"True\" ShownInLg=\"True\"><Part ID=\"headerDetails\" Key=\"ETS.TsHeader\"><Parameters><![CDATA[{\r\n  \"TextEx\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"Job Details\"\r\n  },\r\n  \"Height\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 1\r\n  },\r\n  \"IconCss\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"fa-info\"\r\n  },\r\n  \"CssClassExtra\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"Visible\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXxl\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXl\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInLg\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInMd\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInSm\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXs\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  }\r\n}]]></Parameters></Part><Part ID=\"deatilsJob\" Key=\"ETS.TsDetails\"><Parameters><![CDATA[{\r\n  \"Layout\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 0\r\n  },\r\n  \"ItemJson\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"[\\r\\n  {\\r\\n    \\\"Key\\\": null,\\r\\n    \\\"CaptionEx\\\": \\\"Job Name\\\",\\r\\n    \\\"ContentEx\\\": \\\"{data.Job.Selected.Job}\\\",\\r\\n    \\\"EnabledEx\\\": \\\"\\\",\\r\\n    \\\"VisibleEx\\\": null,\\r\\n    \\\"IconCssEx\\\": null,\\r\\n    \\\"PickerTypeLinkButton\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"Key\\\": null,\\r\\n    \\\"CaptionEx\\\": \\\"Product\\\",\\r\\n    \\\"ContentEx\\\": \\\"{data.Job.Selected.Product} [{data.Job.Selected.ProductCode}]\\\",\\r\\n    \\\"EnabledEx\\\": null,\\r\\n    \\\"VisibleEx\\\": null,\\r\\n    \\\"IconCssEx\\\": null,\\r\\n    \\\"PickerTypeLinkButton\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"Key\\\": null,\\r\\n    \\\"CaptionEx\\\": \\\"Recipe\\\",\\r\\n    \\\"ContentEx\\\": \\\"{data.Job.Selected.Recipe}\\\",\\r\\n    \\\"EnabledEx\\\": null,\\r\\n    \\\"VisibleEx\\\": null,\\r\\n    \\\"IconCssEx\\\": null,\\r\\n    \\\"PickerTypeLinkButton\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"Key\\\": null,\\r\\n    \\\"CaptionEx\\\": \\\"Completed Batches\\\",\\r\\n    \\\"ContentEx\\\": \\\"{data.Job.Selected.ActualCount[0]} of {data.Job.Selected.PlannedCount} Batches\\\",\\r\\n    \\\"EnabledEx\\\": null,\\r\\n    \\\"VisibleEx\\\": null,\\r\\n    \\\"IconCssEx\\\": null,\\r\\n    \\\"PickerTypeLinkButton\\\": null\\r\\n  },\\r\\n  {\\r\\n    \\\"Key\\\": null,\\r\\n    \\\"CaptionEx\\\": \\\"Planned Batch Size\\\",\\r\\n    \\\"ContentEx\\\": \\\"{data.Job.Selected.PlannedSize} {data.Job.Selected.PlannedUnits}\\\",\\r\\n    \\\"EnabledEx\\\": null,\\r\\n    \\\"VisibleEx\\\": null,\\r\\n    \\\"IconCssEx\\\": null,\\r\\n    \\\"PickerTypeLinkButton\\\": null\\r\\n  }\\r\\n]\"\r\n  },\r\n  \"CssClassExtra\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"Visible\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInLg\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInMd\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInSm\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXs\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  }\r\n}]]></Parameters></Part></ColFixedLeft><Col ID=\"R1C2\" Width=\"4\" CssClassExtra=\"\" ShownInXs=\"True\" ShownInSm=\"True\" ShownInMd=\"True\" ShownInLg=\"True\"><Part ID=\"headerBatchLabor\" Key=\"ETS.TsHeader\"><Parameters><![CDATA[{\r\n  \"TextEx\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"Job\"\r\n  },\r\n  \"Height\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 1\r\n  },\r\n  \"IconCss\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"CssClassExtra\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"Visible\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXxl\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXl\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInLg\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInMd\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInSm\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXs\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  }\r\n}]]></Parameters></Part><Part ID=\"headerBatch\" Key=\"ETS.TsParagraph\"><Parameters><![CDATA[{\r\n  \"TextEx\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"##Creating a Batch for Job: **{jobName}**\"\r\n  },\r\n  \"CssClassExtra\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"Visible\": {\r\n    \"Key\": \"\",\r\n    \"Value\": false\r\n  },\r\n  \"ShownInLg\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInMd\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInSm\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXs\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  }\r\n}]]></Parameters></Part><Part ID=\"inputBatchName\" Key=\"ETS.Forms.TsInputText\"><Parameters><![CDATA[{\r\n  \"CaptionEx\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"Batch Name\"\r\n  },\r\n  \"CaptionSubEx\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"Enter a unique Batch Name for the parent Job (typically 1, 2, 3, etcâ€¦)\"\r\n  },\r\n  \"FormKey\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"inputBatchName\"\r\n  },\r\n  \"CssClassExtra\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"Visible\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"LayoutMode\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 1\r\n  },\r\n  \"TotalWidthBs\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 12\r\n  },\r\n  \"LabelWidthBs\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 4\r\n  },\r\n  \"IsMultiLine\": {\r\n    \"Key\": \"\",\r\n    \"Value\": false\r\n  },\r\n  \"MultiLineRows\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 4\r\n  },\r\n  \"PlaceholderEx\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"Enabled\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"VariantDataType\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 0\r\n  },\r\n  \"AutoCorrectMode\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 0\r\n  }\r\n}]]></Parameters></Part><Part ID=\"BtnForm\" Key=\"ETS.Forms.TsFormButtons\"><Parameters><![CDATA[{\r\n  \"DefaultFormButtonKey\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"Save\"\r\n  },\r\n  \"LeftItemJson\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"[]\"\r\n  },\r\n  \"RightItemJson\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"[\\r\\n  {\\r\\n    \\\"Key\\\": \\\"Save\\\",\\r\\n    \\\"CaptionEx\\\": \\\"Start\\\",\\r\\n    \\\"ToolTipEx\\\": \\\"\\\",\\r\\n    \\\"ButtonTypeCssEx\\\": \\\"btn-primary\\\",\\r\\n    \\\"EnabledEx\\\": \\\"\\\",\\r\\n    \\\"VisibleEx\\\": \\\"\\\",\\r\\n    \\\"IsPopupMenu\\\": false,\\r\\n    \\\"IconCssEx\\\": \\\"\\\",\\r\\n    \\\"PickerTypeLinkButton\\\": \\\"\\\",\\r\\n    \\\"UrlEx\\\": \\\"\\\",\\r\\n    \\\"OnClientClickEx\\\": \\\"\\\",\\r\\n    \\\"OnServerClick\\\": \\\"StartJob_Click\\\",\\r\\n    \\\"ConfirmEnabled\\\": false,\\r\\n    \\\"ConfirmCaptionEx\\\": \\\"\\\",\\r\\n    \\\"ConfirmMessageEx\\\": \\\"\\\",\\r\\n    \\\"WindowTargetEx\\\": \\\"\\\",\\r\\n    \\\"SplashMode\\\": 0\\r\\n  },\\r\\n  {\\r\\n    \\\"Key\\\": \\\"Cancel\\\",\\r\\n    \\\"CaptionEx\\\": \\\"resx:Caption.Cancel, Ts.Core\\\",\\r\\n    \\\"ToolTipEx\\\": \\\"\\\",\\r\\n    \\\"ButtonTypeCssEx\\\": \\\"btn-default dirty-ignore\\\",\\r\\n    \\\"EnabledEx\\\": \\\"\\\",\\r\\n    \\\"VisibleEx\\\": \\\"\\\",\\r\\n    \\\"IsPopupMenu\\\": false,\\r\\n    \\\"IconCssEx\\\": \\\"\\\",\\r\\n    \\\"PickerTypeLinkButton\\\": \\\"\\\",\\r\\n    \\\"UrlEx\\\": \\\"{ETS.ReturnUrl:raw}\\\",\\r\\n    \\\"OnClientClickEx\\\": \\\"\\\",\\r\\n    \\\"OnServerClick\\\": \\\"\\\",\\r\\n    \\\"ConfirmEnabled\\\": false,\\r\\n    \\\"ConfirmCaptionEx\\\": \\\"\\\",\\r\\n    \\\"ConfirmMessageEx\\\": \\\"\\\",\\r\\n    \\\"WindowTargetEx\\\": \\\"\\\",\\r\\n    \\\"SplashMode\\\": 0\\r\\n  }\\r\\n]\"\r\n  },\r\n  \"CssClassExtra\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"Visible\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"StickyBottom\": {\r\n    \"Key\": \"\",\r\n    \"Value\": false\r\n  },\r\n  \"ShownInXxl\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXl\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInLg\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInMd\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInSm\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXs\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  }\r\n}]]></Parameters></Part><Part ID=\"formValidation\" Key=\"ETS.Forms.TsValidationSummary\"><Parameters><![CDATA[{\r\n  \"UseWarnings\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"WarningTitle\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"WarningButtonText\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"Confirm\"\r\n  },\r\n  \"WarningButtonCancelText\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"Cancel\"\r\n  },\r\n  \"ErrorTitle\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"ErrorButtonCancelText\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"Close\"\r\n  },\r\n  \"ButtonAlign\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 2\r\n  },\r\n  \"IsModalDialogEnabled\": {\r\n    \"Key\": \"\",\r\n    \"Value\": false\r\n  },\r\n  \"CssClassExtra\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"Visible\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"OnServerDisableNormalButtons\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"OnServerWarningConfirmClick\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"ShownInLg\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInMd\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInSm\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXs\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  }\r\n}]]></Parameters></Part><Part ID=\"dataJob\" Key=\"ETS.DataTables.TsDataTableCustomSql\"><Parameters><![CDATA[{\r\n  \"SqlParametersJson\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"[\\r\\n  {\\r\\n    \\\"Name\\\": \\\"JobID\\\",\\r\\n    \\\"SqlDataType\\\": \\\"int\\\",\\r\\n    \\\"DefaultValue\\\": \\\"-1\\\",\\r\\n    \\\"ValuesKey\\\": \\\"JobID\\\"\\r\\n  }\\r\\n]\"\r\n  },\r\n  \"Sql\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"SELECT j.Name [Job]\\r\\n, p.Name [Product]\\r\\n, p.ProductCode\\r\\n, r.Name [Recipe]\\r\\n, jb.PlannedNumberOfBatches [PlannedCount]\\r\\n, jb.PlannedBatchSize [PlannedSize]\\r\\n, jb.PlannedBatchSizeUnits [PlannedUnits]\\r\\n, foo.BatchCount [ActualCount]\\r\\nFROM tJob j\\r\\nJOIN tJobBatch jb\\r\\nON j.ID = jb.JobID\\r\\nJOIN tProduct p \\r\\nON j.ProductID = p.ID\\r\\nJOIN tRecipe r\\r\\nON jb.RecipeID = r.ID\\r\\nLEFT JOIN (SELECT JobID\\r\\n\\t\\t, COUNT(*) [BatchCount]\\r\\n\\t\\tFROM tBatch \\r\\n\\t\\tWHERE JobID = @JobID\\r\\n\\t\\tGROUP BY JobID\\r\\n) foo\\r\\nON j.ID = foo.JobID\\r\\nWHERE j.ID = @JobID\"\r\n  },\r\n  \"CssClassExtra\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"Visible\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"Enabled\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ContentIsSqlVisible\": {\r\n    \"Key\": \"trace\",\r\n    \"Value\": false\r\n  },\r\n  \"ContentIsTableVisible\": {\r\n    \"Key\": \"\",\r\n    \"Value\": false\r\n  },\r\n  \"TargetDataKey\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"data.Job\"\r\n  },\r\n  \"CacheSeconds\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 0\r\n  },\r\n  \"CacheDependencies\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"SelectedWhenField\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"SelectedEqualsValue\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"ShouldAutoSelectedFirstRow\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"PagingEnabled\": {\r\n    \"Key\": \"\",\r\n    \"Value\": false\r\n  },\r\n  \"SourceConnectionString\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"CommandTimeout\": {\r\n    \"Key\": \"\",\r\n    \"Value\": -1\r\n  }\r\n}]]></Parameters></Part></Col><Col ID=\"R1C3\" Width=\"3\" CssClassExtra=\"\" ShownInXs=\"True\" ShownInSm=\"True\" ShownInMd=\"True\" ShownInLg=\"True\"><Part ID=\"div1\" Key=\"ETS.TsDiv\"><Parameters><![CDATA[{\r\n  \"TextEx\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"HeightPx\": {\r\n    \"Key\": \"\",\r\n    \"Value\": 234\r\n  },\r\n  \"CssClassExtra\": {\r\n    \"Key\": \"\",\r\n    \"Value\": \"\"\r\n  },\r\n  \"Visible\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInLg\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInMd\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInSm\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  },\r\n  \"ShownInXs\": {\r\n    \"Key\": \"\",\r\n    \"Value\": true\r\n  }\r\n}]]></Parameters></Part></Col></Row></Content>",
  "ContentCode": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Web.ModelBinding;\r\nusing System.Web.UI.DataVisualization.Charting;\r\nusing ETS.Core.Api;\r\nusing ETS.Core.Api.Models;\r\nusing ETS.Core.Api.Models.Data;\r\nusing ETS.Core.Enums;\r\nusing ETS.Core.Extensions;\r\nusing ETS.Core.Services.Resource;\r\nusing ETS.Ts.Core.ContentParts;\r\nusing ETS.Ts.Core.Enums;\r\nusing ETS.Ts.Core.Scripting;\r\n\r\nnamespace ETS.Ts.Content\r\n{\r\n  /// ***********************************************************\r\n  public partial class StartBatch : ContentPageBase\r\n  {\r\n    [ValuesProperty()]\r\n    public int JobID { get; set; } = -1;\r\n\r\n    [ValuesProperty()]\r\n    public int SystemID { get; set; } = -1;\r\n\r\n    DbJobBatchComposite _job;\r\n    ETS.Core.Api.Models.Tags.Tag _jobTag;\r\n    ETS.Core.Api.Models.Tags.Tag _batchTag;\r\n    DbProduct _product;\r\n    DbRecipe _recipe;\r\n    string _batchName;\r\n    DbSystem _system;\r\n    DbMaterial _material;\r\n    public DbItem _item;\r\n\r\n    public DbItemLogDefinition _itemLogDef;\r\n\r\n    // ***********************************************************\r\n    protected override bool ContentPage_Init()\r\n    {\r\n\r\n      this.Page.Trace.IsEnabled = true;\r\n\r\n      // Gets current Datetime and then converts to UnixTimeSeconds\r\n      DateTime currentTime = DateTime.Now;\r\n      //long unixTime = ((DateTimeOffset)currentTime).ToUnixTimeSeconds();\r\n      // float unixFloat = (float)unixTime;\r\n\r\n      var api = ETS.Core.Api.ApiService.GetInstance();\r\n\r\n      var dateTimeTag = api.Data.DbTag.Load.ByID(546);\r\n      string dateTimeTagValue = dateTimeTag.Value;\r\n\r\n\r\n      Trace.Write(\"Datetime.Now Value is: \" + currentTime);\r\n      Trace.Write(\"Datetime.Tag Value is: \" + dateTimeTagValue);\r\n\r\n\r\n      var systems = this.Ets.Api.Data.DbSystem.GetList.ForParentSystemID(this.SystemID).ThrowIfLoadFailed(\"SystemID\", this.SystemID);\r\n      _system = systems[0];\r\n      _jobTag = this.Ets.Api.Tags.Load.ByID(27).ThrowIfLoadFailed(\"IDtagjob\", _system.JobTagID);\r\n      _batchTag = this.Ets.Api.Tags.Load.ByID(26).ThrowIfLoadFailed(\"IDbatchtag\", _system.BatchTagID);\r\n\r\n      _job = this.Ets.Api.Data.DbJobBatchComposite.Load.ByID(JobID).ThrowIfLoadFailed(\"JobID\", JobID);\r\n      _product = this.Ets.Api.Data.DbProduct.Load.ByID(_job.ProductID).ThrowIfLoadFailed(\"ProductID\", _job.ProductID);\r\n\r\n      _recipe = this.Ets.Api.Data.DbRecipe.Load.ByID(_job.RecipeID).ThrowIfLoadFailed(\"ID\", _job.RecipeID);\r\n\r\n      _itemLogDef = this.Ets.Api.Data.DbItemLogDefinition.Load.ByID(2).ThrowIfLoadFailed(\"Code\", 2);\r\n\r\n      this.Ets.Values[\"jobName\"] = _job.Name;\r\n      return true;\r\n    }\r\n\r\n    // *********************************************************************\r\n    protected override bool ContentPage_PartPreInit02()\r\n    {\r\n\r\n      return true;\r\n    }\r\n\r\n    // ***********************************************************\r\n    protected void StartJob_Click(object sender, EventArgs e)\r\n    {\r\n      try\r\n      {\r\n        if (!StartJob(false)) return;\r\n        var qsparams = new\r\n        {\r\n          batch = _batchName\r\n        };\r\n        var url = this.Ets.ProcessExpressionUrl(\"WaitForBatchStart?jobname={batch}\", qsparams);\r\n        this.Ets.Pages.RedirectToUrl(url);\r\n      }\r\n      catch (Exception ex)\r\n      {\r\n        this.Ets.Debug.FailFromException(ex);\r\n      }\r\n\r\n    }\r\n\r\n    // ***********************************************************\r\n\r\n    // ***********************************************************\r\n    protected bool StartJob(bool RunDemo)\r\n    {\r\n      var uow = this.Ets.Api.CreateUnitOfWork();\r\n\r\n      if (RunDemo)\r\n      {\r\n        _job.RecipeID = _recipe.ID;\r\n        this.Ets.Api.Data.DbJobBatchComposite.Save.UpdateExisting(_job, uow);\r\n      }\r\n\r\n\r\n      var Batch = this.Ets.Values.GetAsString(\"inputBatchName\");\r\n      DbSystem parentSystem = this.Ets.Api.Data.DbSystem.Load.ByID(1).ThrowIfLoadFailed(\"SystemID\", 1);\r\n      var jobName = this.Ets.Values.GetAsString(\"JobName\");\r\n      _batchName = jobName + \"-\" + this.Ets.Form.GetValueAsStringByKey(\"inputBatchName\");\r\n      var nameCount = this.Ets.Api.Util.Db.ExecuteScalar<int>(@\"SELECT COUNT(*) FROM tBatch WHERE Name = {1}\".FormatWith(_job.ID.ToSql(), _batchName.ToSql())).ThrowIfFailed();\r\n\r\n\r\n      if (Batch.IsNullOrWhiteSpace()) { this.Ets.Form.AddValidationError(\"Batch must be named.\"); }\r\n      if (nameCount != 0) { this.Ets.Form.AddValidationError(\"Batch {0} already exists. Please use a new name.\".FormatWith(_batchName)); }\r\n      if (!this.Ets.Form.IsValid) return false;\r\n\r\n      // Gets a list of items from the database and checks if the materialid and locationid is correct with the recipe and HBW. Then it selects the lowest out of the ids and updates it with locationid 1 which is the MPO\r\n      // Create a reference to the api service\r\n      var api = ETS.Core.Api.ApiService.GetInstance();\r\n\r\n      // Declare a list object to store items\r\n      List<ETS.Core.Api.Models.Data.DbItem> items = new List<ETS.Core.Api.Models.Data.DbItem>();\r\n\r\n      // Load the list of items from the database\r\n      items = api.Data.ListOf.DbItems.GetList.WithSql(\"SELECT * FROM tItem\");\r\n\r\n      // Check if _job.RecipeID is cod\r\n      if (_job?.RecipeID == 1)\r\n      {\r\n        // Load the material based on RecipeID\r\n        _material = this.Ets.Api.Data.DbMaterial.Load.ByID(2).ThrowIfLoadFailed(\"ID\", _job.RecipeID);\r\n\r\n        // Define a list of LocationIDs that you want to check (7, 8, and 9 in this case)\r\n        List<int> locationIDsToCheck = new List<int> { 7, 8, 9, 10, 11, 12, 13, 14, 15 };\r\n\r\n        // Find the items that match the MaterialID and LocationIDs in the items list\r\n        var matchingItems = items.Where(i => i.MaterialID == _material.ID && locationIDsToCheck.Contains(i.LocationID));\r\n\r\n        // Find the item with the lowest ID among the matching items\r\n        var itemWithLowestID = matchingItems.OrderBy(i => i.ID).FirstOrDefault();\r\n        _item = itemWithLowestID;\r\n        this.Ets.Api.Tags.UpdateVirtualTagByID(562, \"WHITE\", uow).ThrowIfFailed();\r\n        //this.Ets.Api.Tags.UpdateVirtualTagByID(546, DateTime.Now, uow).ThrowIfFailed();\r\n        this.Ets.Api.Tags.Load.ByID(546);\r\n\r\n        // Now you have the item you need, which is 'itemWithLowestID'.\r\n        // You can use it as required.\r\n\r\n        if (itemWithLowestID != null)\r\n        {\r\n          // Update the 'LocationID' of the matched item to 1\r\n          itemWithLowestID.LocationID = 1;\r\n\r\n\r\n          api.Data.DbItem.Save.UpdateExisting(itemWithLowestID);\r\n          ETS.Core.Api.Models.Data.DbItemLog itemLog = new ETS.Core.Api.Models.Data.DbItemLog();\r\n\r\n          itemLog.User = this.Ets.User.Login;\r\n          itemLog.ItemLogDefinitionID = 2;\r\n          itemLog.LogDateTime = this.Ets.SiteNow;\r\n          itemLog.Lot = itemWithLowestID.Lot;\r\n          itemLog.ItemID = itemWithLowestID.ID;\r\n          itemLog.MaterialID = 2;\r\n          itemLog.Quantity = 1;\r\n          itemLog.LocationID = 1;\r\n          itemLog.JobID = JobID;\r\n          //itemLog.SubLot = itemWithLowestID.Lot;\r\n          itemLog.Notes = \"Moved to production\";\r\n\r\n          ETS.Core.Api.Models.Result<ETS.Core.Api.Models.Data.DbItemLog> result;\r\n\r\n          // Here we insert the entity in the database (The ID will be created when inserted to the database)\r\n          result = api.Data.DbItemLog.Save.InsertAsNew(itemLog);\r\n\r\n        }\r\n\r\n      }\r\n\r\n      // Check if _job.RecipeID is trout\r\n      if (_job?.RecipeID == 2)\r\n      {\r\n        // Load the material based on RecipeID\r\n        _material = this.Ets.Api.Data.DbMaterial.Load.ByID(3).ThrowIfLoadFailed(\"ID\", _job.RecipeID);\r\n\r\n        // Define a list of LocationIDs that you want to check (7, 8, and 9 in this case)\r\n        List<int> locationIDsToCheck = new List<int> { 7, 8, 9, 10, 11, 12, 13, 14, 15 };\r\n\r\n        // Find the items that match the MaterialID and LocationIDs in items list\r\n        var matchingItems = items.Where(i => i.MaterialID == _material.ID && locationIDsToCheck.Contains(i.LocationID));\r\n\r\n        // Gets current Datetime and then converts to UnixTimeSeconds\r\n        DateTime currentTime = DateTime.UtcNow;\r\n        float unixTime = ((DateTimeOffset)currentTime).ToUnixTimeSeconds();\r\n\r\n        Trace.Write(\"UnixTime Value is: \" + unixTime);\r\n\r\n        // Find the item with the lowest ID among the matching items\r\n        var itemWithLowestID = matchingItems.OrderBy(i => i.ID).FirstOrDefault();\r\n        this.Ets.Api.Tags.UpdateVirtualTagByID(562, \"RED\", uow).ThrowIfFailed();\r\n       // this.Ets.Api.Tags.UpdateVirtualTagByID(546, unixTime, uow).ThrowIfFailed();\r\n\r\n        // Now you have the item you need, which is 'itemWithLowestID'.\r\n        // You can use it as required.\r\n        // ...\r\n        if (itemWithLowestID != null)\r\n        {\r\n          // Update the 'LocationID' of the matched item to 1\r\n          itemWithLowestID.LocationID = 1;\r\n\r\n          api.Data.DbItem.Save.UpdateExisting(itemWithLowestID);\r\n          ETS.Core.Api.Models.Data.DbItemLog itemLog = new ETS.Core.Api.Models.Data.DbItemLog();\r\n\r\n\r\n          itemLog.User = this.Ets.User.Login;\r\n          itemLog.ItemLogDefinitionID = 2;\r\n          itemLog.LogDateTime = this.Ets.SiteNow;\r\n          itemLog.Lot = itemWithLowestID.Lot;\r\n          itemLog.ItemID = itemWithLowestID.ID;\r\n          itemLog.MaterialID = 3;\r\n          itemLog.Quantity = 1;\r\n          itemLog.LocationID = 1;\r\n          itemLog.JobID = JobID;\r\n          itemLog.SubLot = itemWithLowestID.Lot;\r\n          itemLog.Notes = \"Moved to production\";\r\n\r\n          ETS.Core.Api.Models.Result<ETS.Core.Api.Models.Data.DbItemLog> result;\r\n\r\n          result = api.Data.DbItemLog.Save.InsertAsNew(itemLog);\r\n\r\n\r\n        }\r\n      }\r\n      // Check if _job.RecipeID is salmon\r\n      if (_job.RecipeID == 3)\r\n      {\r\n        // Load the material based on RecipeID\r\n        _material = this.Ets.Api.Data.DbMaterial.Load.ByID(1).ThrowIfLoadFailed(\"ID\", _job.RecipeID);\r\n\r\n        // Define a list of LocationIDs that you want to check (7, 8, and 9 in this case)\r\n        List<int> locationIDsToCheck = new List<int> { 7, 8, 9, 10, 11, 12, 13, 14, 15 };\r\n\r\n        // Find the items that match the MaterialID and LocationIDs in items list\r\n        var matchingItems = items.Where(i => i.MaterialID == _material.ID && locationIDsToCheck.Contains(i.LocationID));\r\n\r\n        // Gets current Datetime and then converts to UnixTimeSeconds\r\n        DateTime currentTime = DateTime.Now;\r\n        //long unixTime = ((DateTimeOffset)currentTime).ToUnixTimeSeconds();\r\n        // float unixFloat = (float)unixTime;\r\n\r\n        Trace.Write(\"Datetime.Now Value is: \" + currentTime);\r\n\r\n        this.Ets.Api.Tags.UpdateVirtualTagByID(562, \"BLUE\", uow).ThrowIfFailed();\r\n        //this.Ets.Api.Tags.UpdateVirtualTagByID(546, currentTime, uow).ThrowIfFailed();\r\n\r\n        // Find the item with the lowest ID among the matching items\r\n        var itemWithLowestID = matchingItems.OrderBy(i => i.ID).FirstOrDefault();\r\n\r\n        if (itemWithLowestID != null)\r\n        {\r\n          itemWithLowestID.LocationID = 1;\r\n\r\n          api.Data.DbItem.Save.UpdateExisting(itemWithLowestID);\r\n          ETS.Core.Api.Models.Data.DbItemLog itemLog = new ETS.Core.Api.Models.Data.DbItemLog();\r\n\r\n          itemLog.User = this.Ets.User.Login;\r\n          itemLog.ItemLogDefinitionID = 2;\r\n          itemLog.ItemID = itemWithLowestID.ID;\r\n          itemLog.LogDateTime = this.Ets.SiteNow;\r\n          itemLog.Lot = itemWithLowestID.Lot;\r\n          itemLog.MaterialID = 1;\r\n          itemLog.Quantity = 1;\r\n          itemLog.LocationID = 1;\r\n          itemLog.JobID = JobID;\r\n          itemLog.SubLot = itemWithLowestID.Lot;\r\n          itemLog.Notes = \"Moved to production\";\r\n\r\n          ETS.Core.Api.Models.Result<ETS.Core.Api.Models.Data.DbItemLog> result;\r\n\r\n          result = api.Data.DbItemLog.Save.InsertAsNew(itemLog);\r\n\r\n        }\r\n      }\r\n\r\n\r\n      this.Ets.Api.Tags.UpdateVirtualTagByID(parentSystem.PlannedSizeTagID, _job.PlannedBatchSize, uow).ThrowIfFailed();\r\n      this.Ets.Api.Tags.UpdateVirtualTagByID(29, _product.Name, uow).ThrowIfFailed();\r\n      this.Ets.Api.Tags.UpdateVirtualTagByID(26, _batchName, uow).ThrowIfFailed();\r\n      this.Ets.Api.Tags.UpdateVirtualTagByID(27, jobName, uow).ThrowIfFailed();\r\n      this.Ets.Api.Tags.UpdateVirtualTagByID(139, 1, uow).ThrowIfFailed();\r\n\r\n      // this.Ets.Api.Tags.UpdateVirtualTagByName(\"Discrete.Overall.Job.Name\", \"{0}.KPI_OVERALL\".FormatWith(_job.Name), uow).ThrowIfFailed();\r\n\r\n      \r\n      var url = this.Ets.Pages.PageUrl;\r\n      this.Ets.Pages.RedirectToUrl(url);\r\n\r\nreturn uow.ExecuteReturnsResultObject().ThrowIfFailed();\r\n    }\r\n  }\r\n}",
  "ContentPageParameters": "",
  "ContentData": "",
  "ContentJs": "",
  "ContentCss": ""
}